name: ci-dev

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Non-sensitive values stored as Environment → dev → Variables
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }} # e.g. "default"
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }} # e.g. "app"
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }} # e.g. "app"

jobs:
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run lint --if-present
      - run: npm test --if-present -- --ci

  build_and_push:
    name: Build & Push (dev)
    needs: test
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      # Static keys for PoC
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Compute ECR registry
        run: echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - uses: aws-actions/amazon-ecr-login@v2
      - uses: docker/setup-buildx-action@v3

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:dev-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:dev-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EKS (dev)
    # Only deploy on direct pushes to dev, not on PRs
    if: github.event_name == 'push'
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Write kubeconfig from secret
        run: |
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: Set image on deployment
        env:
          IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:dev-${{ github.sha }}
        run: |
          kubectl -n "$K8S_NAMESPACE" set image deployment/"$DEPLOYMENT_NAME" "$CONTAINER_NAME"="$IMAGE"

      - name: Wait for rollout
        run: |
          kubectl -n "$K8S_NAMESPACE" rollout status deployment/"$DEPLOYMENT_NAME" --timeout=180s
