name: ci

on:
  push:
    branches: [main, dev] # âœ… run on main and dev
  pull_request:
    branches: [main] # optional: PRs into main
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Set these in GitHub "Environments" (we keep using the 'dev' env for secrets/vars)
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }} # e.g. "default"
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }} # e.g. "app"
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }} # e.g. "app"
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}# e.g. "oms-cluster"

jobs:
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint --if-present
      - run: npm test
        env:
          CI: true

  build_and_push:
    name: Build & Push (main/dev)
    needs: test
    runs-on: ubuntu-latest
    environment: dev # reusing same environment/secrets
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Compute registry & tag prefix
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          if [ "${{ github.ref_name }}" = "main" ]; then echo "TAG_PREFIX=prod" >> $GITHUB_ENV; else echo "TAG_PREFIX=dev" >> $GITHUB_ENV; fi

      - uses: aws-actions/amazon-ecr-login@v2
      - uses: docker/setup-buildx-action@v3

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64 # add ,linux/arm64 if your nodes are Graviton
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:${{ env.TAG_PREFIX }}-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:${{ env.TAG_PREFIX }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EKS (main/dev)
    if: github.event_name == 'push' # only deploy on direct pushes (not PRs)
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: dev # reusing the same env for secrets/vars
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Ensure AWS CLI is available (runner usually has it; this keeps us safe)
      - name: Ensure AWS CLI present
        run: |
          aws --version || (curl -sS "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip \
            && unzip -q awscliv2.zip && sudo ./aws/install && aws --version)

      - uses: azure/setup-kubectl@v4
        with:
          version: v1.29.0

      - name: Generate kubeconfig (fresh each run)
        run: aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "${{ secrets.AWS_REGION }}"

      - run: kubectl version --short
      - run: kubectl get nodes
      - run: kubectl get ns "$K8S_NAMESPACE" || kubectl create ns "$K8S_NAMESPACE"

      - name: Apply k8s manifests (idempotent)
        run: kubectl -n "$K8S_NAMESPACE" apply -f infra/k8s/

      - name: Set image on deployment
        env:
          IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:${{ github.ref_name == 'main' && 'prod' || 'dev' }}-${{ github.sha }}
        run: kubectl -n "$K8S_NAMESPACE" set image deployment/"$DEPLOYMENT_NAME" "$CONTAINER_NAME"="$IMAGE"

      - name: Wait for rollout
        run: kubectl -n "$K8S_NAMESPACE" rollout status deployment/"$DEPLOYMENT_NAME" --timeout=300s
