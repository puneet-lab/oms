name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npx prisma generate

      - name: Init test schema
        run: npx prisma db push --skip-generate
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Run tests
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Lint (optional)
        run: npm run lint --if-present

  build_and_push:
    name: Build & Push (main/dev)
    needs: test
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Compute registry & tag prefix
        shell: bash
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> "$GITHUB_ENV"
          TAG_PREFIX=$([ "${{ github.ref_name }}" = "main" ] && echo prod || echo dev)
          echo "TAG_PREFIX=$TAG_PREFIX" >> "$GITHUB_ENV"

      - uses: aws-actions/amazon-ecr-login@v2
      - uses: docker/setup-buildx-action@v3

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:${{ env.TAG_PREFIX }}-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:${{ env.TAG_PREFIX }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EKS (main/dev)
    if: github.event_name == 'push'
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: azure/setup-kubectl@v4
        with:
          version: v1.29.0

      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --name "${{ env.EKS_CLUSTER_NAME }}" --region "${{ env.AWS_REGION }}"

      - run: kubectl version --client
      - run: kubectl get ns "${{ env.K8S_NAMESPACE }}" || kubectl create ns "${{ env.K8S_NAMESPACE }}"

      - name: Create/Update app-env Secret
        run: |
          kubectl -n "${{ env.K8S_NAMESPACE }}" create secret generic app-env \
            --from-literal=DATABASE_URL='${{ secrets.TEST_DATABASE_URL }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply k8s manifests
        run: kubectl -n "${{ env.K8S_NAMESPACE }}" apply -f infra/k8s/

      - name: Compute image ref
        shell: bash
        run: |
          TAG_PREFIX=$([ "${{ github.ref_name }}" = "main" ] && echo prod || echo dev)
          echo "IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:${TAG_PREFIX}-${{ github.sha }}" >> "$GITHUB_ENV"

      - name: Set image on deployment
        run: kubectl -n "${{ env.K8S_NAMESPACE }}" set image deployment/"${{ env.DEPLOYMENT_NAME }}" "${{ env.CONTAINER_NAME }}"="${{ env.IMAGE }}"

      - name: Wait for rollout
        run: kubectl -n "${{ env.K8S_NAMESPACE }}" rollout status deployment/"${{ env.DEPLOYMENT_NAME }}" --timeout=300s
