openapi: 3.0.3
info:
  title: OMS API
  version: 1.0.0
  description: |
    Modular monolith API for Order Management.
    Dev uses dummy bearer auth: `Authorization: Bearer dummy.<role>.<userId>`.
servers:
  - url: /api
    description: API namespace (most endpoints)
  - url: /
    description: Root (health)
tags:
  - name: Meta
    description: Health & utility
  - name: Auth
    description: Authentication (dummy, dev-only)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # dummy today; real token later

  headers:
    X-Request-Id:
      description: Correlates server logs with this response.
      schema: { type: string }
    X-RateLimit-Limit:
      description: Max requests allowed in the current window.
      schema: { type: integer, example: 100 }
    X-RateLimit-Remaining:
      description: Requests left in the current window.
      schema: { type: integer, example: 97 }
    X-RateLimit-Reset:
      description: Unix epoch seconds when the window resets.
      schema: { type: integer, format: int64, example: 1723199999 }

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              example: UNAUTHORIZED
            message:
              type: string
              example: Missing or invalid token
    User:
      type: object
      required: [id, role]
      properties:
        id:
          type: string
          example: 'dev-user-123'
        role:
          type: string
          enum: [sales, admin]
          example: sales

  responses:
    Unauthorized:
      description: Unauthorized
      headers:
        X-Request-Id: { $ref: '#/components/headers/X-Request-Id' }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          examples:
            unauthorized:
              value: { error: { code: UNAUTHORIZED, message: 'Missing or invalid token' } }
    Forbidden:
      description: Forbidden
      headers:
        X-Request-Id: { $ref: '#/components/headers/X-Request-Id' }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          examples:
            forbidden:
              value: { error: { code: FORBIDDEN, message: 'Insufficient role' } }
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
        X-Request-Id: { $ref: '#/components/headers/X-Request-Id' }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          examples:
            limited:
              value: { error: { code: RATE_LIMITED, message: 'Too many requests' } }

paths:
  /health:
    get:
      tags: [Meta]
      summary: Liveness probe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }

  /v1/ping:
    get:
      tags: [Meta]
      summary: Quick sanity check
      responses:
        '200':
          description: Pong
          headers:
            X-Request-Id: { $ref: '#/components/headers/X-Request-Id' }
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  pong: { type: boolean, example: true }

  /v1/auth:
    get:
      tags: [Auth]
      summary: Usage help for dummy auth
      responses:
        '200':
          description: Usage + roles
          headers:
            X-Request-Id: { $ref: '#/components/headers/X-Request-Id' }
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  usage: { type: string, example: 'Authorization: Bearer dummy.<role>.<userId>' }
                  roles:
                    type: array
                    items: { type: string, enum: [sales, admin] }
                    example: [sales, admin]

  /v1/auth/me:
    get:
      tags: [Auth]
      summary: Return current user (dummy)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          headers:
            X-Request-Id: { $ref: '#/components/headers/X-Request-Id' }
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
              examples:
                salesUser:
                  value: { user: { id: 'dev-user-123', role: 'sales' } }
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
